import React from 'react'
import { Link } from 'gatsby'
import Layout from '../../components/Layout'
import * as styles from './styles/projpage.module.css'
import { AiOutlineArrowLeft} from 'react-icons/ai'
import Gallery from '../../components/gallery';
import z1 from '../../images/projects/rover/k1.jpeg'
import z2 from '../../images/projects/rover/k2.jpg'
import z3 from '../../images/projects/rover/k3.jpg'
import z4 from '../../images/projects/rover/k4.jpg'
import z5 from '../../images/projects/rover/k5.jpg'
import z6 from '../../images/projects/rover/k6.png'
import z7 from '../../images/projects/rover/k7.png'
import z8 from '../../images/projects/rover/k8.png'
import z9 from '../../images/projects/rover/k9.png'
import z10 from '../../images/projects/rover/k10.png'
import { Helmet } from 'react-helmet'

export default function Rover() {
  return (
    <div>
      <Layout>
        <Helmet title=" Projects | Unmanned Rover " defer={false} />
        <div className={styles.title}>
          <p>Unmanned Rover</p>       
        </div>  
        <div className={styles.header}>
          <Link to="/project"><button className={styles.jobbutton}><AiOutlineArrowLeft /> Back</button></Link>
          <a className={styles.jobbuttonlink} href="https://github.com/dhruvpathak1/unmanned_rover_fyp" target="_blank" rel="noreferrer"><button className={styles.jobbutton}>View Github</button></a><br /><br />
          <p className={styles.desp}>An unmanned ground vehicle is one which functions while in touch with the ground but without the presence of a human on board. Unmanned ground vehicles (UGV) can be employed in a variety of situations when having a human operator present is inconvenient, dangerous, or impossible.</p>
          <br /><br />
        </div>
        <div className={styles.info}>
        <p className={styles.desp}>Key Features :</p>
          <ul className={styles.unlist}>
            <li className={styles.list}>Remote Location Access</li>
            <li className={styles.list}>Semi Automation</li>
            <li className={styles.list}>Local Network Live Feed</li>
            <li className={styles.list}>Combination of Raspberry Pi and Arduino Uno</li>
            <li className={styles.list}>Real Time Graph Updates</li>
            <li className={styles.list}>User Friendly Website Interface</li>
          </ul>
          <br /><br />
          <p className={styles.desp}><b>Requirements:</b> Hardware: Raspberry Pi, Arduino Uno, Camera, Gyroscope, Breadboard, Jumper Wires (MF, MM and FF), Multi-meter, Display Screen, HDMI Cord, Micro USB, Keyboard, Mouse, DC Motor, GPS, Sensor, Ultrasonic Sensor, Servo Motor, Density, Humidity and Temperature sensor, Air Quality sensor etc. Software : Arduino IDE, Python,  Google Firebase, HTML, CSS, Javascript, C++</p>

          <br /><br />

          <p className={styles.desp}>
            The rover consists of two processing systems: a Raspberry Pi single board computer and an Arduino UNO micro- controller board. The Raspberry Pi serves as the eye of the system because it consists of a Pi camera that broadcasts a live stream around the rover for users to navigate. The Arduino acts as the body of the system because it controls the movement of the four motors that rotate the wheels of the rover.<br /><br />
            To achieve remote access and control of the rover over the Internet, we needed to connect to a cloud database. Therefore, the Raspberry Pi is connected to the Google Firebase cloud server. When the user clicks a navigation button in the web app to move the rover in a specific direction, the navigation variable is set to 1. Updating the value of the navigation variable does the same thing in the cloud database in real time. The transfer command is then read by the Raspberry Pi on the rover and immediately sends the serialized command to the Arduino micro-controller responsible for controlling the motors on the four wheels of the rover. Upon receiving the serialized command, the Arduino will execute the forward code on the hobby motor and the required motor on the rover. Some sensors connect to the Arduino microcontroller while others connect to the Raspberry Pi. The data that is generated by the sensors is consistently displayed in the web application. The data generated by the sensor connected to the Arduino is first sent to the Raspberry Pi in serialized format. Once all the sensor data is stored on the Raspberry Pi, the data will be uploaded to Google Firebaseâ€™s cloud storage and then the data will be successfully transferred to your website.<br /><br />
            When connected to a local WiFi network, the rover responds fairly instantly. The response time increases dramatically when utilizing the Internet to operate the rover through a cloud server with a public IP address. Acquisition of video for live streaming content can only be done on local networks. Live streaming is not possible over the WiFi network. 
</p>
          </div>

          <Gallery img1={z1} title1="" img2={z2} title2="" img3={z4} title3="Top View" img4={z3} title4="Side View" img5={z5} title5="Bottom View" img6={z6} title6="Website Interface" img7={z7} title7="Real Time Graph" img8={z8} title8="Real Time Graph" img9={z9} title9="Remote Access Data Flow" img10={z10} title10="Sensor Data Flow" />

      </Layout>
    </div>
  )
}
